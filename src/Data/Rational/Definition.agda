{-# OPTIONS --exact-split --prop #-}
module Data.Rational.Definition where

open import PropUniverses
open import Type.Sum hiding (_,_)
open import Type.Quotient
open import Proposition.Sum
open import Proposition.Identity hiding (refl)
open import Data.Int

Pair : ùí∞‚ÇÄ Àô
Pair = ‚Ñ§ √ó (Œ£‚Çö Œª (z : ‚Ñ§) ‚Üí z ‚â† 0)

open import Relation.Binary

_‚â°_ : Rel ùí∞‚ÇÄ Pair Pair
(nx Œ£., (dx , _)) ‚â° (ny Œ£., (dy , _)) = nx * dy == ny * dx

instance
  Reflexive‚â° : Reflexive _‚â°_
  Transitive‚â° : Transitive _‚â°_
  Symmetric‚â° : Symmetric _‚â°_

open import Proof

refl ‚¶É Reflexive‚â° ‚¶Ñ _ = refl ‚¶É Reflexive== ‚¶Ñ _
sym ‚¶É Symmetric‚â° ‚¶Ñ = sym ‚¶É Symmetric== ‚¶Ñ
trans ‚¶É Transitive‚â° ‚¶Ñ
  {nx Œ£., (dx , _)}{ny Œ£., (dy , _)}{nz Œ£., (dz , _)} p q =
  proof nx * dz
    === nz * dx :by: {!!}
  qed


Rational : ùí∞‚ÇÅ Àô
Rational = {!Quotient.Type (‚Ñ§ √ó (Œ£‚Çö Œª (z : ‚Ñ§) ‚Üí z ‚â† 0))!}
